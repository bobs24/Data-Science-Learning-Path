# -*- coding: utf-8 -*-
"""COVID-19 Wordcloud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tMb5v7LXI402Kl5zf7zolF0kubxvZV1G

#Covid-19 Pre-existing Medical Condition Analysis using Plotly Express, Choropleth maps and WordCloud Text Visualization

##Task 1 : Importing all the necessary libraries
"""

import pandas as pd       #Data analysis and Manipulation
import plotly.express as px    #Data Visualization (one line of code for one graph) 
import matplotlib.pyplot as plt   #Data Visualization for WordCloud
from wordcloud import WordCloud   #Wordcloud Text Visualization

import plotly.io as pio
pio.renderers.default = 'colab'     # To initialize plotly (default mode of plotly if OFF as it consumes a lot of space)

"""##Task 2 : Importing the dataset and Visualizing it (Dataset 1 : Worldometer dataset)"""

from google.colab import files
files.upload()

df = pd.read_csv('covid_worldometer_data.csv')
df

px.bar(df, x = 'Country', y = 'TotalCases', color = 'Country')

px.bar(df.head(15), x = 'Country', y = 'TotalCases', color = 'Country')

df.columns

px.scatter(df.head(20), x = 'Totalcases/1M', y = 'TotalDeath/1M', color = 'Country')

"""##Task 3: Geographic Visualization using Choropleth maps"""

# A choropleth map displays divided geographical areas or regions that are coloured, shaded or patterned in relation to a data variable. 
#Amazing Representation of data in a map . Choropleth maps provide an easy way to visualize how a measurement varies across a geographic area.

df.columns

px.choropleth(df, locations = 'iso_alpha', hover_name = 'Country', color = 'TotalDeath/1M', projection = 'orthographic', color_continuous_scale = 'Viridis')

px.choropleth(df, locations = 'iso_alpha', hover_name = 'Country', color = 'TotalDeath/1M', projection = 'equirectangular', color_continuous_scale = 'Plasma')

px.choropleth(df, locations = 'iso_alpha', hover_name = 'Country', color = 'TotalDeath/1M', scope = 'asia', color_continuous_scale = 'Plasma')

"""##Task 4: Importing and Analyzing the dataset(Dataset 2: Covid-19 Pre-existing condition Medical dataset; source: CDC,US)"""

from google.colab import files
files.upload()

df1 = pd.read_csv('US_medical_data.csv')

df1

df1.groupby('State').count()

df1.groupby('Age Group').count()

"""##Task 5: Visualizing the Pre-existing condition Medical dataset"""

filter1 = df1[(df1['State']=='US')]

filter1

px.bar(df1, x = 'Age Group', y = 'COVID-19 Deaths', color = 'Condition', hover_name = 'Condition', log_y = True)

px.bar(filter1, x = 'Age Group', y = 'COVID-19 Deaths', color = 'Condition Group', hover_name = 'Condition')

filter2 = df1[(df1['State']=='US') & (df1['Age Group']=='All Ages')]

filter2.columns

px.bar(filter2, x = 'Condition Group', y = 'COVID-19 Deaths', color = 'COVID-19 Deaths', hover_name = 'Condition')

filter3 = df1[(df1['Condition']=='Influenza and pneumonia') & (df1['Age Group']=='All Ages')]

filter3

filter3.columns

px.bar(filter3, x = 'State', y = 'COVID-19 Deaths', color = 'State', log_y = True)

"""##Task 6: WordCloud Text Visualization"""

#Step a= Convert the columns with conditions and condition group into list using tolist() function
#Step b= Convert the list to one single string
#Step c= Convert the string into WordCloud
# WordCloud imported in task 1. # WordCloud visualization needs matplotlib

"""###WordCloud 1- Condition group"""

filter2

list1 = filter2['Condition Group'].tolist()

list1

string1 = "".join(list1)

string1

plt.figure(figsize=(30,30))
plt.imshow(WordCloud().generate(string1))

"""###WordCloud 2- Conditions"""

list2 = df1['Condition'].tolist()

string2 = " ".join(list2)

string2

plt.figure(figsize=(30,30))
plt.imshow(WordCloud().generate(string2))